#security:
#    # https://symfony.com/doc/current/security/authenticator_manager.html
#    enable_authenticator_manager: true
#    # https://symfony.com/doc/current/security.html#c-hashing-passwords
#    password_hashers:
#        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
#    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
#    providers:
#        users_in_memory: { memory: null }
#    firewalls:
#        dev:
#            pattern: ^/(_(profiler|wdt)|css|images|js)/
#            security: false
#        main:
#            lazy: true
#            provider: users_in_memory
#
#            # activate different ways to authenticate
#            # https://symfony.com/doc/current/security.html#firewalls-authentication
#
#            # https://symfony.com/doc/current/security/impersonating_user.html
#            # switch_user: true
#
#    # Easy way to control access for large sections of your site
#    # Note: Only the *first* access control that matches will be used
#    access_control:
#        # - { path: ^/admin, roles: ROLE_ADMIN }
#        # - { path: ^/profile, roles: ROLE_USER }
#
security:
    password_hashers:
        App\Entity\Client:
            algorithm: "auto"
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
            algorithm: "auto"
    enable_authenticator_manager: true
    providers:
        users_in_memory: { memory: null }
        app_user_provider:
            entity:
                class: App\Entity\Client
                property: username
    firewalls:
        #login:
        #    methods: [POST]
        #    pattern: ^/api/login
        #    stateless: true
        #    json_login:
        #        check_path: /api/login_check
        #        username_path: username
        #        password_path: password
        #        provider: app_user_provider 
        #        success_handler: lexik_jwt_authentication.handler.authentication_success
        #        failure_handler: lexik_jwt_authentication.handler.authentication_failure
        api:
            pattern: ^/api
            stateless: true
            provider: app_user_provider
        #    jwt: ~
        #dev:
        #    pattern: ^/(_(profiler|wdt)|css|images|js)/
        #    security: false
        #main:
        #    lazy: true
        #    provider: users_in_memory
    access_control:
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        # - { path: ^/api,       roles: IS_AUTHENTICATED_FULLY }
